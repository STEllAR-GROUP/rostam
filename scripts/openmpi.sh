#!/bin/bash
#
# Copyright (c) 2017 Alireza Kheirkhahan
#
# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file BOOST_LICENSE_1_0.rst or copy at http://www.boost.org/LICENSE_1_0.txt)

usage()
{
    echo "Usage: $0 -d directory -v version [args]"
    echo
    echo "This script downloads and builds the OpenMPI."
    echo
    echo "Options:"
    echo "  -p    Prefix: the directory where clang should be installed [default: /opt/mn/clang/<version>"
    echo "  -v    Version of OpenMPI to build (format: X.Y.Z)"
    echo "  -s    suffix for version number" 
    echo "  -t    Number of threads to use while building [default: number of processors]" 
    echo "  -m    The Module directory [default: /opt/modules]"
    echo "  -b    The build directory [default: /dev/shm]"
}

BUILD_DIRECTORY=/dev/shm
VERSION=2.0.2
THREADS=`grep -c ^processor /proc/cpuinfo`
MODULE_DIRECTORY=/opt/modules
POSTFIX=""

##########################################################
# Argument parsing
while getopts "ht:p:s:v:b:m:" OPTION; do case $OPTION in
    h)
        usage
        exit 0
        ;;
    t)
        if [[ $OPTARG =~ ^[0-9]+$ ]]; then
            THREADS=$OPTARG
        else
            echo "ERROR: -t argument was invalid"; echo
            usage
            exit 1
        fi
        ;;
    p)
        PREFIX=$OPTARG
        ;;
	s)
        SUFFIX=$OPTARG
        ;;
    v)
        VERSION=$OPTARG
        ;;
    b)
        BUILD_DIRECTORY=$OPTARG
        ;;
    m)
        MODULE_DIRECTORY=$OPTARG
        ;;
    ?)
        usage
        exit 1
        ;;
esac; done
#########################################################

ver=( ${VERSION//./ } )

ORIGINAL_DIRECTORY=$PWD

if [ -n "$SUFFIX" ]; then SUFFIX=-$SUFFIX; fi

if [ -z "$PREFIX" ]; then PREFIX=/opt/mn/openmpi/$VERSION$SUFFIX; fi

cleanup()
{
    cd $ORIGINAL_DIRECTORY
    if [[ -d $BUILD_DIRECTORY/openmpi-$VERSION && -w $BUILD_DIRECTORY/openmpi-$VERSION ]];
    then
        rm -rf $BUILD_DIRECTORY/openmpi-$VERSION
    fi
}

error()
{
    cleanup
    exit 1
}

cd $BUILD_DIRECTORY
mkdir openmpi-$VERSION
cd openmpi-$VERSION

wget https://www.open-mpi.org/software/ompi/v${ver[0]}.${ver[1]}/downloads/openmpi-$VERSION.tar.bz2
    if ! [[ $? == "0" ]]; then echo "ERROR: Unable to download llvm"; error; fi

tar --no-same-owner -xf openmpi-$VERSION.tar.bz2
if ! [[ $? == "0" ]]; then echo "ERROR: Unable to unpack `pwd`/openmpi-$VERSION.tar.bz2"; error; fi

cd openmpi-$VERSION

./configure \
--prefix=$PREFIX \
--with-threads=posix \
--enable-shared \
--enable-mpi-thread-multiple \
--with-verbs \
--enable-mpirun-prefix-by-default \
--with-hwloc \
CFLAGS="-mtune=generic" \
CXXFLAGS="-mtune=generic"

make -j${THREADS}
if ! [[ $? == "0" ]]; then echo "ERROR: failed to build GCC"; error; fi

make install

cleanup

#######################################################
# Creating the Module file
if [ -z "$MODULE_WORD" ]; then MODULE_WORD=`basename $PREFIX`; fi
if [ ! -d $MODULE_DIRECTORY/openmpi ];
   then mkdir $MODULE_DIRECTORY/openmpi; fi
if [ -f $MODULE_DIRECTORY/openmpi/$MODULE_WORD ]
   then rm $MODULE_DIRECTORY/openmpi/$MODULE_WORD; fi

echo "#%Module" >> $MODULE_DIRECTORY/openmpi/$MODULE_WORD
echo "# Generated by gcc_build.sh" >> $MODULE_DIRECTORY/openmpi/$MODULE_WORD
echo "proc ModulesHelp { } {" >> $MODULE_DIRECTORY/openmpi/$MODULE_WORD
echo "    puts stderr { The Open MPI Project is an open source MPI-3 implementation. " >> $MODULE_DIRECTORY/openmpi/$MODULE_WORD
echo " - Homepage: http://www.open-mpi.org/" >> $MODULE_DIRECTORY/openmpi/$MODULE_WORD
echo "    }" >> $MODULE_DIRECTORY/openmpi/$MODULE_WORD
echo "}" >> $MODULE_DIRECTORY/openmpi/$MODULE_WORD
echo "" >> $MODULE_DIRECTORY/openmpi/$MODULE_WORD
echo "module-whatis {Description: The Open MPI Project is an open source MPI-3 implementation. " >> $MODULE_DIRECTORY/openmpi/$MODULE_WORD
echo " - Homepage: http://www.open-mpi.org/}" >> $MODULE_DIRECTORY/openmpi/$MODULE_WORD

echo "" >> $MODULE_DIRECTORY/openmpi/$MODULE_WORD
echo "set root $PREFIX" >> $MODULE_DIRECTORY/openmpi/$MODULE_WORD

echo "" >> $MODULE_DIRECTORY/openmpi/$MODULE_WORD
echo "conflict mpi" >> $MODULE_DIRECTORY/openmpi/$MODULE_WORD

echo "" >> $MODULE_DIRECTORY/openmpi/$MODULE_WORD
echo "prepend-path	CPATH			\$root/include" >> $MODULE_DIRECTORY/openmpi/$MODULE_WORD
echo "prepend-path	LD_LIBRARY_PATH		\$root/lib" >> $MODULE_DIRECTORY/openmpi/$MODULE_WORD
echo "prepend-path	LLIBRARY_PATH		\$root/lib" >> $MODULE_DIRECTORY/openmpi/$MODULE_WORD
echo "prepend-path	MANPATH			\$root/share/man" >> $MODULE_DIRECTORY/openmpi/$MODULE_WORD
echo "prepend-path	PATH			\$root/bin" >> $MODULE_DIRECTORY/openmpi/$MODULE_WORD
echo "prepend-path	PKG_CONFIG_PATH		\$root/lib/pkgconfig" >> $MODULE_DIRECTORY/openmpi/$MODULE_WORD
echo "setenv  ROOTOPENMPI	\"\$root\"" >> $MODULE_DIRECTORY/openmpi/$MODULE_WORD
echo "setenv  VERSIONOPENMPI	\"$VERSION\"" >> $MODULE_DIRECTORY/openmpi/$MODULE_WORD
